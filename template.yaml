AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Resources:
  TestDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '6'
      AllowMajorVersionUpgrade: true
      AutoMinorVersionUpgrade: true
      BackupRetentionPeriod: '0'
      CopyTagsToSnapshot: true
      DBInstanceClass: !Ref EnvConfigdbinstancetypeAsString
      DBSubnetGroupName: !Ref TestDatabasePublicSubnetGroup
      Engine: postgres
      EngineVersion: '10.3'
      MasterUsername: root
      MasterUserPassword: !Ref EnvConfigdbpasswordAsString
      MultiAZ: false
      PubliclyAccessible: true
      StorageEncrypted: !Ref EnvConfigencryptionAsString
      StorageType: gp2
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName}
            - ResourceName: Test-db
      VPCSecurityGroups:
        - !Ref TestDatabaseSecurityGroup
    Metadata:
      StackeryName: Test-db
  TestDatabasePrivateSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName} VPC Private Subnets
        - ResourceName: TestDatabase
      SubnetIds:
        - !Ref VirtualNetworkPrivateSubnet1
        - !Ref VirtualNetworkPrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName} VPC Private Subnets
            - ResourceName: TestDatabase
  TestDatabasePublicSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName} VPC Public Subnets
        - ResourceName: TestDatabase
      SubnetIds:
        - !Ref VirtualNetworkPublicSubnet1
        - !Ref VirtualNetworkPublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName} VPC Public Subnets
            - ResourceName: TestDatabase
  TestDatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Database Security Group
      SecurityGroupIngress:
        CidrIp: 0.0.0.0/0
        FromPort: 5432
        IpProtocol: tcp
        ToPort: 5432
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName} VPC Security Group
            - ResourceName: Test-db
      VpcId: !Ref VirtualNetwork
  VirtualNetwork:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName}
            - ResourceName: Test-vpc
      EnableDnsHostnames: true
    Metadata:
      StackeryName: Test-vpc
  VirtualNetworkPrivateSubnet1:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Select
        - 0
        - !Cidr
          - 10.0.0.0/16
          - 4
          - 14
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Private Subnet 1
            - ResourceName: Test-vpc
      VpcId: !Ref VirtualNetwork
  VirtualNetworkPrivateSubnet2:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Select
        - 1
        - !Cidr
          - 10.0.0.0/16
          - 4
          - 14
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Private Subnet 2
            - ResourceName: Test-vpc
      VpcId: !Ref VirtualNetwork
  VirtualNetworkPublicSubnet1:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Select
        - 2
        - !Cidr
          - 10.0.0.0/16
          - 4
          - 14
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Public Subnet 1
            - ResourceName: Test-vpc
      VpcId: !Ref VirtualNetwork
  VirtualNetworkPublicSubnet2:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Select
        - 3
        - !Cidr
          - 10.0.0.0/16
          - 4
          - 14
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Public Subnet 2
            - ResourceName: Test-vpc
      VpcId: !Ref VirtualNetwork
  VirtualNetworkPrivateSubnet1NatGatewayEIP:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  VirtualNetworkPrivateSubnet1NatGateway:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt VirtualNetworkPrivateSubnet1NatGatewayEIP.AllocationId
      SubnetId: !Ref VirtualNetworkPublicSubnet1
  VirtualNetworkPrivateSubnet1RouteTable:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Private Subnet 1 Route Table
            - ResourceName: Test-vpc
      VpcId: !Ref VirtualNetwork
  VirtualNetworkPrivateSubnet1NatGatewayRoute:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref VirtualNetworkPrivateSubnet1NatGateway
      RouteTableId: !Ref VirtualNetworkPrivateSubnet1RouteTable
  VirtualNetworkPrivateSubnet1RouteTableAssociation:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VirtualNetworkPrivateSubnet1RouteTable
      SubnetId: !Ref VirtualNetworkPrivateSubnet1
  VirtualNetworkPrivateSubnet2NatGatewayEIP:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  VirtualNetworkPrivateSubnet2NatGateway:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt VirtualNetworkPrivateSubnet2NatGatewayEIP.AllocationId
      SubnetId: !Ref VirtualNetworkPublicSubnet2
  VirtualNetworkPrivateSubnet2RouteTable:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Private Subnet 2 Route Table
            - ResourceName: Test-vpc
      VpcId: !Ref VirtualNetwork
  VirtualNetworkPrivateSubnet2NatGatewayRoute:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref VirtualNetworkPrivateSubnet2NatGateway
      RouteTableId: !Ref VirtualNetworkPrivateSubnet2RouteTable
  VirtualNetworkPrivateSubnet2RouteTableAssociation:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VirtualNetworkPrivateSubnet2RouteTable
      SubnetId: !Ref VirtualNetworkPrivateSubnet2
  VirtualNetworkPublicSubnetsInternetGateway:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Public Subnets Internet Gateway
            - ResourceName: Test-vpc
  VirtualNetworkPublicSubnetsInternetGatewayAttachment:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref VirtualNetworkPublicSubnetsInternetGateway
      VpcId: !Ref VirtualNetwork
  VirtualNetworkPublicSubnetsRouteTable:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Public Subnets Route Table
            - ResourceName: Test-vpc
      VpcId: !Ref VirtualNetwork
  VirtualNetworkPublicSubnetsInternetGatewayRoute:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref VirtualNetworkPublicSubnetsInternetGateway
      RouteTableId: !Ref VirtualNetworkPublicSubnetsRouteTable
  VirtualNetworkPublicSubnet1RouteTableAssociation:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VirtualNetworkPublicSubnetsRouteTable
      SubnetId: !Ref VirtualNetworkPublicSubnet1
  VirtualNetworkPublicSubnet2RouteTableAssociation:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VirtualNetworkPublicSubnetsRouteTable
      SubnetId: !Ref VirtualNetworkPublicSubnet2
  CoreAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${StackTagName} Environment ${EnvironmentTagName}
        - ResourceName: Core Thiscovery API
      StageName: !Ref EnvironmentAPIGatewayStageName
      DefinitionBody:
        swagger: '2.0'
        info: {}
        paths:
          /v1/user/{id}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getuserbyuuid.Arn}/invocations
              responses: {}
            patch:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${patchuser.Arn}/invocations
              responses: {}
          /v1/user:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getuserbyemail.Arn}/invocations
              responses: {}
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${createuserapi.Arn}/invocations
              responses: {}
          /v1/project:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${listprojects.Arn}/invocations
              responses: {}
          /v1/project/{id}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getprojectbyuuid.Arn}/invocations
              responses: {}
          /v1/project-user-status:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getprojectstatuses.Arn}/invocations
              responses: {}
          v1/userexternalaccount:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function3.Arn}/invocations
              responses: {}
          v1/userproject:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function.Arn}/invocations
              responses: {}
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function4.Arn}/invocations
              responses: {}
          v1/usertask:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function2.Arn}/invocations
              responses: {}
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function5.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
    Metadata:
      StackeryName: Core Thiscovery API
  getuserbyuuid:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-getuserbyuuid
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: get-user-by-uuid
      CodeUri: api/endpoints
      Handler: user.get_user_by_id_api
      Runtime: python3.6
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSLambdaENIManagementAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VirtualNetwork.DefaultSecurityGroup
        SubnetIds:
          - !Ref VirtualNetworkPrivateSubnet1
          - !Ref VirtualNetworkPrivateSubnet2
      Environment:
        Variables:
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
          DB_ID: !Ref TestDatabase
          DB_ADDRESS: !GetAtt TestDatabase.Endpoint.Address
          DB_PORT: !GetAtt TestDatabase.Endpoint.Port
          DB_ARN: !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${TestDatabase}
      Events:
        CoreAPIGETv1userid:
          Type: Api
          Properties:
            Path: /v1/user/{id}
            Method: GET
            RestApiId: !Ref CoreAPI
    Metadata:
      StackeryName: get-user-by-uuid
  getuserbyemail:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-getuserbyemail
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: get-user-by-email
      CodeUri: api/endpoints
      Handler: user.get_user_by_email_api
      Runtime: python3.6
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSLambdaENIManagementAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VirtualNetwork.DefaultSecurityGroup
        SubnetIds:
          - !Ref VirtualNetworkPrivateSubnet1
          - !Ref VirtualNetworkPrivateSubnet2
      Events:
        CoreAPIGETv1user:
          Type: Api
          Properties:
            Path: /v1/user
            Method: GET
            RestApiId: !Ref CoreAPI
      Environment:
        Variables:
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
          DB_ID: !Ref TestDatabase
          DB_ADDRESS: !GetAtt TestDatabase.Endpoint.Address
          DB_PORT: !GetAtt TestDatabase.Endpoint.Port
          DB_ARN: !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${TestDatabase}
    Metadata:
      StackeryName: get-user-by-email
  createuserapi:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-createuserapi
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: create-user
      CodeUri: api/endpoints
      Handler: user.create_user_api
      Runtime: python3.6
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSLambdaENIManagementAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VirtualNetwork.DefaultSecurityGroup
        SubnetIds:
          - !Ref VirtualNetworkPrivateSubnet1
          - !Ref VirtualNetworkPrivateSubnet2
      Events:
        CoreAPIPOSTv1user:
          Type: Api
          Properties:
            Path: /v1/user
            Method: POST
            RestApiId: !Ref CoreAPI
      Environment:
        Variables:
          DB_ID: !Ref TestDatabase
          DB_ADDRESS: !GetAtt TestDatabase.Endpoint.Address
          DB_PORT: !GetAtt TestDatabase.Endpoint.Port
          DB_ARN: !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${TestDatabase}
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
    Metadata:
      StackeryName: create-user
  patchuser:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-patchuser
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: patch-user-api
      CodeUri: api/endpoints
      Handler: user.patch_user_api
      Runtime: python3.6
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSLambdaENIManagementAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VirtualNetwork.DefaultSecurityGroup
        SubnetIds:
          - !Ref VirtualNetworkPrivateSubnet1
          - !Ref VirtualNetworkPrivateSubnet2
      Events:
        CoreAPIPATCHv1userid:
          Type: Api
          Properties:
            Path: /v1/user/{id}
            Method: PATCH
            RestApiId: !Ref CoreAPI
      Environment:
        Variables:
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
          DB_ID: !Ref TestDatabase
          DB_ADDRESS: !GetAtt TestDatabase.Endpoint.Address
          DB_PORT: !GetAtt TestDatabase.Endpoint.Port
          DB_ARN: !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${TestDatabase}
    Metadata:
      StackeryName: patch-user-api
  listprojects:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-listprojects
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: list-projects
      CodeUri: api/endpoints
      Handler: project.list_projects_api
      Runtime: python3.6
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSLambdaENIManagementAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VirtualNetwork.DefaultSecurityGroup
        SubnetIds:
          - !Ref VirtualNetworkPrivateSubnet1
          - !Ref VirtualNetworkPrivateSubnet2
      Events:
        CoreAPIGETv1project:
          Type: Api
          Properties:
            Path: /v1/project
            Method: GET
            RestApiId: !Ref CoreAPI
      Environment:
        Variables:
          DB_ID: !Ref TestDatabase
          DB_ADDRESS: !GetAtt TestDatabase.Endpoint.Address
          DB_PORT: !GetAtt TestDatabase.Endpoint.Port
          DB_ARN: !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${TestDatabase}
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
    Metadata:
      StackeryName: list-projects
  getprojectbyuuid:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-getprojectbyuuid
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: get-project-by-uuid
      CodeUri: api/endpoints
      Handler: project.get_project_api
      Runtime: python3.6
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSLambdaENIManagementAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VirtualNetwork.DefaultSecurityGroup
        SubnetIds:
          - !Ref VirtualNetworkPrivateSubnet1
          - !Ref VirtualNetworkPrivateSubnet2
      Events:
        CoreAPIGETv1projectid:
          Type: Api
          Properties:
            Path: /v1/project/{id}
            Method: GET
            RestApiId: !Ref CoreAPI
      Environment:
        Variables:
          DB_ID: !Ref TestDatabase
          DB_ADDRESS: !GetAtt TestDatabase.Endpoint.Address
          DB_PORT: !GetAtt TestDatabase.Endpoint.Port
          DB_ARN: !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${TestDatabase}
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
    Metadata:
      StackeryName: get-project-by-uuid
  getprojectstatuses:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-getprojectstatuses
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: get-project-statuses
      CodeUri: api/endpoints
      Handler: project.get_project_status_for_user_api
      Runtime: python3.6
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSLambdaENIManagementAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VirtualNetwork.DefaultSecurityGroup
        SubnetIds:
          - !Ref VirtualNetworkPrivateSubnet1
          - !Ref VirtualNetworkPrivateSubnet2
      Events:
        CoreAPIGETv1projectuserstatus:
          Type: Api
          Properties:
            Path: /v1/project-user-status
            Method: GET
            RestApiId: !Ref CoreAPI
      Environment:
        Variables:
          DB_ID: !Ref TestDatabase
          DB_ADDRESS: !GetAtt TestDatabase.Endpoint.Address
          DB_PORT: !GetAtt TestDatabase.Endpoint.Port
          DB_ARN: !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${TestDatabase}
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
    Metadata:
      StackeryName: get-project-statuses
  Function:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-Function
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: Function
      CodeUri: src/Function
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSLambdaENIManagementAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VirtualNetwork.DefaultSecurityGroup
        SubnetIds:
          - !Ref VirtualNetworkPrivateSubnet1
          - !Ref VirtualNetworkPrivateSubnet2
      Events:
        CoreAPIGETv1userproject:
          Type: Api
          Properties:
            Path: v1/userproject
            Method: GET
            RestApiId: !Ref CoreAPI
      Environment:
        Variables:
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
          DB_ID: !Ref TestDatabase
          DB_ADDRESS: !GetAtt TestDatabase.Endpoint.Address
          DB_PORT: !GetAtt TestDatabase.Endpoint.Port
          DB_ARN: !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${TestDatabase}
  Function2:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-Function2
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: Function2
      CodeUri: src/Function2
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSLambdaENIManagementAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VirtualNetwork.DefaultSecurityGroup
        SubnetIds:
          - !Ref VirtualNetworkPrivateSubnet1
          - !Ref VirtualNetworkPrivateSubnet2
      Events:
        CoreAPIGETv1usertask:
          Type: Api
          Properties:
            Path: v1/usertask
            Method: GET
            RestApiId: !Ref CoreAPI
      Environment:
        Variables:
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
          DB_ID: !Ref TestDatabase
          DB_ADDRESS: !GetAtt TestDatabase.Endpoint.Address
          DB_PORT: !GetAtt TestDatabase.Endpoint.Port
          DB_ARN: !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${TestDatabase}
  Function3:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-Function3
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: Function3
      CodeUri: src/Function3
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSLambdaENIManagementAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VirtualNetwork.DefaultSecurityGroup
        SubnetIds:
          - !Ref VirtualNetworkPrivateSubnet1
          - !Ref VirtualNetworkPrivateSubnet2
      Events:
        CoreAPIPOSTv1userexternalaccount:
          Type: Api
          Properties:
            Path: v1/userexternalaccount
            Method: POST
            RestApiId: !Ref CoreAPI
      Environment:
        Variables:
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
          DB_ID: !Ref TestDatabase
          DB_ADDRESS: !GetAtt TestDatabase.Endpoint.Address
          DB_PORT: !GetAtt TestDatabase.Endpoint.Port
          DB_ARN: !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${TestDatabase}
  Function4:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-Function4
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: Function4
      CodeUri: src/Function4
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSLambdaENIManagementAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VirtualNetwork.DefaultSecurityGroup
        SubnetIds:
          - !Ref VirtualNetworkPrivateSubnet1
          - !Ref VirtualNetworkPrivateSubnet2
      Events:
        CoreAPIPOSTv1userproject:
          Type: Api
          Properties:
            Path: v1/userproject
            Method: POST
            RestApiId: !Ref CoreAPI
      Environment:
        Variables:
          DB_ID: !Ref TestDatabase
          DB_ADDRESS: !GetAtt TestDatabase.Endpoint.Address
          DB_PORT: !GetAtt TestDatabase.Endpoint.Port
          DB_ARN: !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${TestDatabase}
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
  Function5:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-Function5
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: Function5
      CodeUri: src/Function5
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSLambdaENIManagementAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VirtualNetwork.DefaultSecurityGroup
        SubnetIds:
          - !Ref VirtualNetworkPrivateSubnet1
          - !Ref VirtualNetworkPrivateSubnet2
      Events:
        CoreAPIPOSTv1usertask:
          Type: Api
          Properties:
            Path: v1/usertask
            Method: POST
            RestApiId: !Ref CoreAPI
      Environment:
        Variables:
          DB_ID: !Ref TestDatabase
          DB_ADDRESS: !GetAtt TestDatabase.Endpoint.Address
          DB_PORT: !GetAtt TestDatabase.Endpoint.Port
          DB_ARN: !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${TestDatabase}
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
Parameters:
  StackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  EnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
  EnvConfigdbpasswordAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/db/password
  EnvConfigdbinstancetypeAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/db/instance-type
  EnvConfigencryptionAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/db/encryption
  EnvironmentAPIGatewayStageName:
    Type: String
    Description: Environment name used for API Gateway Stage names (injected by Stackery at deployment time)
Metadata:
  EnvConfigParameters:
    EnvConfigdbpasswordAsString: db.password
    EnvConfigdbinstancetypeAsString: db.instance-type
    EnvConfigencryptionAsString: db.encryption
Outputs:
  DatabaseURL:
    Description: URL of database instance created
    Value: !GetAtt TestDatabase.Endpoint.Address