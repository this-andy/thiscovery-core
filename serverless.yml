# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: citsci-api

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: ">=1.1.0 <2.0.0"

provider:
  name: aws
  runtime: python3.6
  region: eu-west-2
  profile: serverless
  timeout: 30
  role: arn:aws:iam::595383251813:role/citsci_api_lambda_role
  vpc:
    securityGroupIds:
      - sg-b719b0dc
    subnetIds:
      - subnet-4cef1736
      - subnet-653d3328
      - subnet-c4db60ad

iamRoleStatements:
    - Effect: Allow
      Action:
        - rds:*
        - secretsmanager:*
      Resource:
        - "*"

custom:
  pythonRequirements:
    dockerizePip: true

plugins:
  - serverless-python-requirements
  - serverless-offline

functions:
  ping:
    handler: api/handler.ping
    events:
      - http:
          path: v1/ping
          method: get
          cors: true
          private: true

  hubspot-test:
    handler: api/handler.hubspot_entity_info
    events:
      - http:
          path: v1/hubspotdata
          method: get
          cors: true
          private: false

#  connection-test:
#    handler: api/handler.connection_info
#    events:
#      - http:
#          path: v1/connectinfo
#          method: get
#          cors: true
#          private: true

  secrets-test:
    handler: api/secrets_test.get_test_secret
    events:
    - http:
        path: v1/secretstest
        method: get
        cors: true
        private: false

# Project endpoints
  list-projects:
    handler: api/project.list_projects_api
    events:
      - http:
          path: v1/project
          method: get
          cors: true
          private: true

  get-project-by-uuid:
    handler: api/project.get_project_api
    events:
      - http:
          path: v1/project/{id}
          method: get
          cors: true
          private: true

# User endpoints
  get-user-by-uuid:
    handler: api/user.get_user_by_id_api
    events:
      - http:
          path: v1/user/{id}
          method: get
          cors: true
          private: true

  get-user-by-email:
    handler: api/user.get_user_by_email_api
    events:
      - http:
          path: v1/user
          method: get
          cors: true
          private: true

  patch-user:
    handler: api/user.patch_user_api
    events:
      - http:
          path: v1/user/{id}
          method: patch
          cors: true
          private: true

  create-user:
    handler: api/user.create_user_api
    events:
      - http:
          path: v1/user
          method: post
          cors: true
          private: true

# User external account endpoints
  create-user-external-account:
    handler: api/user_external_account.create_user_external_account_api
    events:
      - http:
          path: v1/userexternalaccount
          method: post
          cors: true
          private: true

# User project endpoints
  list-userprojects:
    handler: api/user_project.list_user_projects_api
    events:
      - http:
          path: v1/userproject
          method: get
          cors: true
          private: true

  create-userproject:
    handler: api/user_project.create_user_project_api
    events:
      - http:
          path: v1/userproject
          method: post
          cors: true
          private: true

# User task endpoints
  list-usertasks:
    handler: api/user_task.list_user_tasks_api
    events:
      - http:
          path: v1/usertask
          method: get
          cors: true
          private: true

  create-usertask:
    handler: api/user_task.create_user_task_api
    events:
      - http:
          path: v1/usertask
          method: post
          cors: true
          private: true
