#
#   Thiscovery API - THIS Instituteâ€™s citizen science platform
#   Copyright (C) 2019 THIS Institute
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU Affero General Public License as
#   published by the Free Software Foundation, either version 3 of the
#   License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU Affero General Public License for more details.
#
#   A copy of the GNU Affero General Public License is available in the
#   docs folder of this project.  It is also available www.gnu.org/licenses/
#
"""
This script generates a file sql_tables.py in api.common, which contains a translation of the thiscovery database models defined in thiscovery_admin.
"""
import django
import django_base_settings
import jinja2
import os
import string
import sys

from api.common.dev_config import PATH_TO_THISCOVERY_ADMIN
from django.conf import settings

sys.path.append(PATH_TO_THISCOVERY_ADMIN)

settings.configure(default_settings=django_base_settings, DEBUG=True)
django.setup()

from thiscovery_admin.projects import models


def table_fields_as_class_attributes(list_of_field_names):
    """
    Custom filter for Jinja2 template (https://jinja.palletsprojects.com/en/2.11.x/api/#custom-filters).

    Args:
        list_of_field_names: list of strings representing each table column of a Thiscovery django model

    Returns:
        A string containing class attribute definitions for each element of list_of_field_names. For instance, for field "email", the substring will be:
            self.email = f'{self.table}'.email

    """
    return '\n        '.join(["self.{field_name} = f'{{self.table}}.{field_name}'".format(field_name=x) for x in list_of_field_names])


PREAMBLE = '''"""
This file was auto-generated by the script api.local.admin_tasks.general_admin.generate_table_classes_for_sql_queries.py
Rerun that file if you want recent changes in database models to be reflected here.
"""

class BaseTable:
    def __init__(self):
        self.table = f'projects_{self.__class__.__name__.lower()}'
        self.id = f'{self.table}.id'
        self.created = f'{self.table}.created'
        self.modified = f'{self.table}.modified'

'''

jinja2.filters.FILTERS['table_fields_as_class_attributes'] = table_fields_as_class_attributes

table_class_template = jinja2.Template("""
class {{ model_name }}(BaseTable):
    def __init__(self):
        super().__init__()
        {{ list_of_field_names|table_fields_as_class_attributes }}
        
                
"""
)


thiscovery_models = [x for x in dir(models) if x[0] in string.ascii_uppercase]
thiscovery_models.remove('JSONField')
thiscovery_models.remove('TimeStampedModel')

time_stamped_model_fields = [k for k, v in models.TimeStampedModel.__dict__.items() if isinstance(v, django.db.models.query_utils.DeferredAttribute)]

BASEDIR = os.path.realpath(__file__).split('api')[0]
output_file = os.path.join(BASEDIR, 'api', 'common', 'sql_tables.py')


def main():
    with open(output_file, 'w') as output:
        output.write(PREAMBLE)
        for m_name in thiscovery_models:
            m = models.__dict__[m_name]
            m_fields = [k for k, v in m.__dict__.items() if isinstance(v, django.db.models.query_utils.DeferredAttribute)]
            m_class_str = table_class_template.render(model_name=m_name, list_of_field_names=m_fields)
            output.write(m_class_str)


if __name__ == '__main__':
    main()
